
1. readelf 读取elf文件的内容，并以可读形式输出

	readelf -a part.o	// 输出part.o中的内容


2. objdump  读取elf文件内容

	objdump -d part.o	// 反汇编文件中的代码段

3. 


PLT和GOT是结合起来完成动态加载（PIC动态链接）：


GOT，全称 Global Offset Table，全局偏移表。
    
    位置独立代码一般不能包含绝对的虚拟地址，它需要包含一个相对地址，然后在加载时动态修改。

    全局偏移表包含了绝对地址，从而只要PIC中的地址指向GOT，就不会影响位置独立性和代码共享性。

    全局偏移表中最初包含重定位项所要求信息。

	A 用来计算可重定位字段的取值的补齐
	B 共享目标在执行过程中被加载到内存中的位置，即基地址
	G 执行过程中，重定位项的符号的地址所在位置，即全局偏移表的索引
	GOT 全局偏移表的地址，即GOT的地址
	L 某个符号的过程链接表项的位置（节区偏移或地址），过程连接表项把函数调用重定位到正确的目标位置
	P 存储单位被重定位到的位置
	S 其索引位位于重定位项中的符号的取值

	重定位类型：
	
	R_386_NONE	0    无         无      
	R_386_32	1    word32     S+A      //       
	R_386_PC32	2    word32     S+A-P    // 
	R_386_GOT32	3    word32     G+A-P    // 从全局偏移表基址到符号的全局偏移表项之间距离，构造全局偏移表
	R_386_PLT32	4    word32     L+A-P    // 计算符号的过程链接表项的地址，要构造一个过程连接表
	R_386_COPY	5    无         无       // 用于支持动态链接，偏移量成员引用某个可写段中的某个位置
	R_386_GLOB_DAT	6    word32     S        // 将某个全局偏移表项设置为给定符号的地址，用于确定符号与全局偏移表项关系
	R_386_JMP_SLOT	7    word32     S        // 为了支持动态链接，偏移地址给出过程链接表项位置
	R_386_RELATIVE	8    word32     B+A      // 偏移地址给出共享目标中的一个位置，它包含了代表相对地址的一个数值
	R_386_GOTOFF	9    word32     S+A-GOT  // 计算符号取值与全局偏移表地址间的差，建立全局偏移表
	R_386_GOTPC	10   word32     GOT+A-P  // 与R_386_PC32类似，